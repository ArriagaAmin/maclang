Terminals unused in grammar

   NEW
   FORGET


State 10 conflicts: 1 shift/reduce
State 71 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: I
    2  | %empty

    3 I: Inst
    4  | I Inst

    5 Inst: Action
    6     | Def

    7 Action: VarInst SEMICOLON
    8       | FuncCall SEMICOLON
    9       | Conditional
   10       | LoopWhile
   11       | LoopFor

   12 Def: UnionDef
   13    | RegisterDef
   14    | RutineDef

   15 VarInst: VarDef
   16        | Assign

   17 VarDef: LET VarDefBody

   18 VarDefBody: Type ID OptAssign

   19 OptAssign: %empty
   20          | ASSIGNMENT RValue

   21 Assign: LValue ASSIGNMENT RValue

   22 RValue: Exp
   23       | Array
   24       | STRING

   25 Type: Type OPEN_BRACKET Exp CLOSE_BRACKET
   26     | POINTER Type
   27     | OPEN_PAR Type CLOSE_PAR
   28     | T_UNIT
   29     | T_BOOL
   30     | T_CHAR
   31     | T_INT
   32     | T_FLOAT
   33     | T_STRING

   34 LValue: LValue OPEN_BRACKET Exp CLOSE_BRACKET
   35       | POINTER LValue
   36       | LValue DOT ID
   37       | OPEN_PAR LValue CLOSE_PAR
   38       | ID

   39 Exp: Exp EQUIV Exp
   40    | Exp NOT_EQUIV Exp
   41    | Exp OR Exp
   42    | Exp AND Exp
   43    | NOT Exp
   44    | Exp LESS_THAN Exp
   45    | Exp LESS_EQUAL_THAN Exp
   46    | Exp GREATER_THAN Exp
   47    | Exp GREATER_EQUAL_THAN Exp
   48    | Exp PLUS Exp
   49    | Exp MINUS Exp
   50    | Exp ASTERISK Exp
   51    | Exp DIV Exp
   52    | Exp MODULE Exp
   53    | MINUS Exp
   54    | PLUS Exp
   55    | Exp POWER Exp
   56    | OPEN_PAR Exp CLOSE_PAR
   57    | LValue
   58    | FuncCall
   59    | TRUE
   60    | FALSE
   61    | CHAR
   62    | INT
   63    | FLOAT

   64 Array: OPEN_BRACKET ArrExp CLOSE_BRACKET

   65 ArrExp: %empty
   66       | ArrElems RValue

   67 ArrElems: %empty
   68         | ArrElems RValue COMMA

   69 FuncCall: ID OPEN_PAR ArgsExp CLOSE_PAR

   70 ArgsExp: %empty
   71        | Args RValue

   72 Args: %empty
   73     | Args RValue COMMA

   74 UnionDef: UNION ID OPEN_C_BRACE UnionBody CLOSE_C_BRACE

   75 UnionBody: Type ID SEMICOLON
   76          | UnionBody Type ID SEMICOLON

   77 RegisterDef: REGISTER ID OPEN_C_BRACE RegisterBody CLOSE_C_BRACE

   78 RegisterBody: VarDef SEMICOLON
   79             | RegisterBody VarDef SEMICOLON

   80 Conditional: IF Exp THEN I OptElsif OptElse END

   81 OptElsif: %empty
   82         | Elsifs

   83 Elsifs: ELSIF Exp THEN I
   84       | Elsifs ELSIF Exp THEN I

   85 OptElse: %empty
   86        | ELSE I

   87 LoopWhile: WHILE Exp DO I DONE

   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR DO I DONE

   89 OptStep: %empty
   90        | SEMICOLON Exp

   91 RutineDef: DEF ID OPEN_PAR RutineArgs CLOSE_PAR OptReturn OPEN_C_BRACE Actions CLOSE_C_BRACE

   92 RutineArgs: %empty
   93           | ArgsDef

   94 ArgsDef: Type OptRef ID OptAssign
   95        | ArgsDef Type OptRef ID OptAssign

   96 OptRef: %empty
   97       | AT

   98 OptReturn: %empty
   99          | RIGHT_ARROW Type

  100 Actions: Action
  101        | Actions Action


Terminals, with rules where they appear

$end (0) 0
error (256)
EQUIV (258) 39
NOT_EQUIV (259) 40
OR (260) 41
AND (261) 42
LESS_THAN (262) 44
LESS_EQUAL_THAN (263) 45
GREATER_THAN (264) 46
GREATER_EQUAL_THAN (265) 47
NOT (266) 43
PLUS (267) 48 54
MINUS (268) 49 53
ASTERISK (269) 50
DIV (270) 51
MODULE (271) 52
POWER (272) 55
OPEN_BRACKET (273) 25 34 64
CLOSE_BRACKET (274) 25 34 64
POINTER (275) 26 35
DOT (276) 36
OPEN_PAR (277) 27 37 56 69 88 91
SEMICOLON (278) 7 8 75 76 78 79 88 90
CLOSE_PAR (279) 27 37 56 69 88 91
ASSIGNMENT (280) 20 21
T_INT (281) 31
T_CHAR (282) 30
T_BOOL (283) 29
T_FLOAT (284) 32
T_UNIT (285) 28
T_STRING (286) 33
OPEN_C_BRACE (287) 74 77 91
CLOSE_C_BRACE (288) 74 77 91
COMMA (289) 68 73
REGISTER (290) 77
UNION (291) 74
NEW (292)
FORGET (293)
IF (294) 80
THEN (295) 80 83 84
ELSIF (296) 83 84
ELSE (297) 86
END (298) 80
WHILE (299) 87
DO (300) 87 88
DONE (301) 87 88
FOR (302) 88
LET (303) 17
DEF (304) 91
AT (305) 97
RIGHT_ARROW (306) 99
INT <integer> (307) 62
FLOAT <flot> (308) 63
ID <id> (309) 18 36 38 69 74 75 76 77 88 91 94 95
CHAR <chr> (310) 61
STRING <str> (311) 24
TRUE <boolean> (312) 59
FALSE <boolean> (313) 60


Nonterminals, with rules where they appear

$accept (59)
    on left: 0
S (60)
    on left: 1 2, on right: 0
I (61)
    on left: 3 4, on right: 1 4 80 83 84 86 87 88
Inst (62)
    on left: 5 6, on right: 3 4
Action (63)
    on left: 7 8 9 10 11, on right: 5 100 101
Def (64)
    on left: 12 13 14, on right: 6
VarInst (65)
    on left: 15 16, on right: 7
VarDef (66)
    on left: 17, on right: 15 78 79
VarDefBody (67)
    on left: 18, on right: 17
OptAssign (68)
    on left: 19 20, on right: 18 94 95
Assign (69)
    on left: 21, on right: 16
RValue (70)
    on left: 22 23 24, on right: 20 21 66 68 71 73
Type (71)
    on left: 25 26 27 28 29 30 31 32 33, on right: 18 25 26 27 75 76
    94 95 99
LValue (72)
    on left: 34 35 36 37 38, on right: 21 34 35 36 37 57
Exp (73)
    on left: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56
    57 58 59 60 61 62 63, on right: 22 25 34 39 40 41 42 43 44 45 46
    47 48 49 50 51 52 53 54 55 56 80 83 84 87 88 90
Array (74)
    on left: 64, on right: 23
ArrExp (75)
    on left: 65 66, on right: 64
ArrElems (76)
    on left: 67 68, on right: 66 68
FuncCall (77)
    on left: 69, on right: 8 58
ArgsExp (78)
    on left: 70 71, on right: 69
Args (79)
    on left: 72 73, on right: 71 73
UnionDef (80)
    on left: 74, on right: 12
UnionBody (81)
    on left: 75 76, on right: 74 76
RegisterDef (82)
    on left: 77, on right: 13
RegisterBody (83)
    on left: 78 79, on right: 77 79
Conditional (84)
    on left: 80, on right: 9
OptElsif (85)
    on left: 81 82, on right: 80
Elsifs (86)
    on left: 83 84, on right: 82 84
OptElse (87)
    on left: 85 86, on right: 80
LoopWhile (88)
    on left: 87, on right: 10
LoopFor (89)
    on left: 88, on right: 11
OptStep (90)
    on left: 89 90, on right: 88
RutineDef (91)
    on left: 91, on right: 14
RutineArgs (92)
    on left: 92 93, on right: 91
ArgsDef (93)
    on left: 94 95, on right: 93 95
OptRef (94)
    on left: 96 97, on right: 94 95
OptReturn (95)
    on left: 98 99, on right: 91
Actions (96)
    on left: 100 101, on right: 91 101


State 0

    0 $accept: . S $end

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    $default  reduce using rule 2 (S)

    S            go to state 11
    I            go to state 12
    Inst         go to state 13
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 1

   35 LValue: POINTER . LValue

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    ID        shift, and go to state 27

    LValue  go to state 28


State 2

   37 LValue: OPEN_PAR . LValue CLOSE_PAR

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    ID        shift, and go to state 27

    LValue  go to state 29


State 3

   77 RegisterDef: REGISTER . ID OPEN_C_BRACE RegisterBody CLOSE_C_BRACE

    ID  shift, and go to state 30


State 4

   74 UnionDef: UNION . ID OPEN_C_BRACE UnionBody CLOSE_C_BRACE

    ID  shift, and go to state 31


State 5

   80 Conditional: IF . Exp THEN I OptElsif OptElse END

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 42
    FuncCall  go to state 43


State 6

   87 LoopWhile: WHILE . Exp DO I DONE

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 44
    FuncCall  go to state 43


State 7

   88 LoopFor: FOR . OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR DO I DONE

    OPEN_PAR  shift, and go to state 45


State 8

   17 VarDef: LET . VarDefBody

    POINTER   shift, and go to state 46
    OPEN_PAR  shift, and go to state 47
    T_INT     shift, and go to state 48
    T_CHAR    shift, and go to state 49
    T_BOOL    shift, and go to state 50
    T_FLOAT   shift, and go to state 51
    T_UNIT    shift, and go to state 52
    T_STRING  shift, and go to state 53

    VarDefBody  go to state 54
    Type        go to state 55


State 9

   91 RutineDef: DEF . ID OPEN_PAR RutineArgs CLOSE_PAR OptReturn OPEN_C_BRACE Actions CLOSE_C_BRACE

    ID  shift, and go to state 56


State 10

   38 LValue: ID .
   69 FuncCall: ID . OPEN_PAR ArgsExp CLOSE_PAR

    OPEN_PAR  shift, and go to state 57

    OPEN_PAR  [reduce using rule 38 (LValue)]
    $default  reduce using rule 38 (LValue)


State 11

    0 $accept: S . $end

    $end  shift, and go to state 58


State 12

    1 S: I .
    4 I: I . Inst

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    $default  reduce using rule 1 (S)

    Inst         go to state 59
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 13

    3 I: Inst .

    $default  reduce using rule 3 (I)


State 14

    5 Inst: Action .

    $default  reduce using rule 5 (Inst)


State 15

    6 Inst: Def .

    $default  reduce using rule 6 (Inst)


State 16

    7 Action: VarInst . SEMICOLON

    SEMICOLON  shift, and go to state 60


State 17

   15 VarInst: VarDef .

    $default  reduce using rule 15 (VarInst)


State 18

   16 VarInst: Assign .

    $default  reduce using rule 16 (VarInst)


State 19

   21 Assign: LValue . ASSIGNMENT RValue
   34 LValue: LValue . OPEN_BRACKET Exp CLOSE_BRACKET
   36       | LValue . DOT ID

    OPEN_BRACKET  shift, and go to state 61
    DOT           shift, and go to state 62
    ASSIGNMENT    shift, and go to state 63


State 20

    8 Action: FuncCall . SEMICOLON

    SEMICOLON  shift, and go to state 64


State 21

   12 Def: UnionDef .

    $default  reduce using rule 12 (Def)


State 22

   13 Def: RegisterDef .

    $default  reduce using rule 13 (Def)


State 23

    9 Action: Conditional .

    $default  reduce using rule 9 (Action)


State 24

   10 Action: LoopWhile .

    $default  reduce using rule 10 (Action)


State 25

   11 Action: LoopFor .

    $default  reduce using rule 11 (Action)


State 26

   14 Def: RutineDef .

    $default  reduce using rule 14 (Def)


State 27

   38 LValue: ID .

    $default  reduce using rule 38 (LValue)


State 28

   34 LValue: LValue . OPEN_BRACKET Exp CLOSE_BRACKET
   35       | POINTER LValue .
   36       | LValue . DOT ID

    DOT  shift, and go to state 62

    $default  reduce using rule 35 (LValue)


State 29

   34 LValue: LValue . OPEN_BRACKET Exp CLOSE_BRACKET
   36       | LValue . DOT ID
   37       | OPEN_PAR LValue . CLOSE_PAR

    OPEN_BRACKET  shift, and go to state 61
    DOT           shift, and go to state 62
    CLOSE_PAR     shift, and go to state 65


State 30

   77 RegisterDef: REGISTER ID . OPEN_C_BRACE RegisterBody CLOSE_C_BRACE

    OPEN_C_BRACE  shift, and go to state 66


State 31

   74 UnionDef: UNION ID . OPEN_C_BRACE UnionBody CLOSE_C_BRACE

    OPEN_C_BRACE  shift, and go to state 67


State 32

   43 Exp: NOT . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 68
    FuncCall  go to state 43


State 33

   54 Exp: PLUS . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 69
    FuncCall  go to state 43


State 34

   53 Exp: MINUS . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 70
    FuncCall  go to state 43


State 35

   37 LValue: OPEN_PAR . LValue CLOSE_PAR
   56 Exp: OPEN_PAR . Exp CLOSE_PAR

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 71
    Exp       go to state 72
    FuncCall  go to state 43


State 36

   62 Exp: INT .

    $default  reduce using rule 62 (Exp)


State 37

   63 Exp: FLOAT .

    $default  reduce using rule 63 (Exp)


State 38

   61 Exp: CHAR .

    $default  reduce using rule 61 (Exp)


State 39

   59 Exp: TRUE .

    $default  reduce using rule 59 (Exp)


State 40

   60 Exp: FALSE .

    $default  reduce using rule 60 (Exp)


State 41

   34 LValue: LValue . OPEN_BRACKET Exp CLOSE_BRACKET
   36       | LValue . DOT ID
   57 Exp: LValue .

    OPEN_BRACKET  shift, and go to state 61
    DOT           shift, and go to state 62

    $default  reduce using rule 57 (Exp)


State 42

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   80 Conditional: IF Exp . THEN I OptElsif OptElse END

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    THEN                shift, and go to state 87


State 43

   58 Exp: FuncCall .

    $default  reduce using rule 58 (Exp)


State 44

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   87 LoopWhile: WHILE Exp . DO I DONE

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    DO                  shift, and go to state 88


State 45

   88 LoopFor: FOR OPEN_PAR . ID SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR DO I DONE

    ID  shift, and go to state 89


State 46

   26 Type: POINTER . Type

    POINTER   shift, and go to state 46
    OPEN_PAR  shift, and go to state 47
    T_INT     shift, and go to state 48
    T_CHAR    shift, and go to state 49
    T_BOOL    shift, and go to state 50
    T_FLOAT   shift, and go to state 51
    T_UNIT    shift, and go to state 52
    T_STRING  shift, and go to state 53

    Type  go to state 90


State 47

   27 Type: OPEN_PAR . Type CLOSE_PAR

    POINTER   shift, and go to state 46
    OPEN_PAR  shift, and go to state 47
    T_INT     shift, and go to state 48
    T_CHAR    shift, and go to state 49
    T_BOOL    shift, and go to state 50
    T_FLOAT   shift, and go to state 51
    T_UNIT    shift, and go to state 52
    T_STRING  shift, and go to state 53

    Type  go to state 91


State 48

   31 Type: T_INT .

    $default  reduce using rule 31 (Type)


State 49

   30 Type: T_CHAR .

    $default  reduce using rule 30 (Type)


State 50

   29 Type: T_BOOL .

    $default  reduce using rule 29 (Type)


State 51

   32 Type: T_FLOAT .

    $default  reduce using rule 32 (Type)


State 52

   28 Type: T_UNIT .

    $default  reduce using rule 28 (Type)


State 53

   33 Type: T_STRING .

    $default  reduce using rule 33 (Type)


State 54

   17 VarDef: LET VarDefBody .

    $default  reduce using rule 17 (VarDef)


State 55

   18 VarDefBody: Type . ID OptAssign
   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 92
    ID            shift, and go to state 93


State 56

   91 RutineDef: DEF ID . OPEN_PAR RutineArgs CLOSE_PAR OptReturn OPEN_C_BRACE Actions CLOSE_C_BRACE

    OPEN_PAR  shift, and go to state 94


State 57

   69 FuncCall: ID OPEN_PAR . ArgsExp CLOSE_PAR

    CLOSE_PAR  reduce using rule 70 (ArgsExp)
    $default   reduce using rule 72 (Args)

    ArgsExp  go to state 95
    Args     go to state 96


State 58

    0 $accept: S $end .

    $default  accept


State 59

    4 I: I Inst .

    $default  reduce using rule 4 (I)


State 60

    7 Action: VarInst SEMICOLON .

    $default  reduce using rule 7 (Action)


State 61

   34 LValue: LValue OPEN_BRACKET . Exp CLOSE_BRACKET

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 97
    FuncCall  go to state 43


State 62

   36 LValue: LValue DOT . ID

    ID  shift, and go to state 98


State 63

   21 Assign: LValue ASSIGNMENT . RValue

    NOT           shift, and go to state 32
    PLUS          shift, and go to state 33
    MINUS         shift, and go to state 34
    OPEN_BRACKET  shift, and go to state 99
    POINTER       shift, and go to state 1
    OPEN_PAR      shift, and go to state 35
    INT           shift, and go to state 36
    FLOAT         shift, and go to state 37
    ID            shift, and go to state 10
    CHAR          shift, and go to state 38
    STRING        shift, and go to state 100
    TRUE          shift, and go to state 39
    FALSE         shift, and go to state 40

    RValue    go to state 101
    LValue    go to state 41
    Exp       go to state 102
    Array     go to state 103
    FuncCall  go to state 43


State 64

    8 Action: FuncCall SEMICOLON .

    $default  reduce using rule 8 (Action)


State 65

   37 LValue: OPEN_PAR LValue CLOSE_PAR .

    $default  reduce using rule 37 (LValue)


State 66

   77 RegisterDef: REGISTER ID OPEN_C_BRACE . RegisterBody CLOSE_C_BRACE

    LET  shift, and go to state 8

    VarDef        go to state 104
    RegisterBody  go to state 105


State 67

   74 UnionDef: UNION ID OPEN_C_BRACE . UnionBody CLOSE_C_BRACE

    POINTER   shift, and go to state 46
    OPEN_PAR  shift, and go to state 47
    T_INT     shift, and go to state 48
    T_CHAR    shift, and go to state 49
    T_BOOL    shift, and go to state 50
    T_FLOAT   shift, and go to state 51
    T_UNIT    shift, and go to state 52
    T_STRING  shift, and go to state 53

    Type       go to state 106
    UnionBody  go to state 107


State 68

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   43    | NOT Exp .
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    PLUS      shift, and go to state 81
    MINUS     shift, and go to state 82
    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    $default  reduce using rule 43 (Exp)


State 69

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   54    | PLUS Exp .
   55    | Exp . POWER Exp

    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    $default  reduce using rule 54 (Exp)


State 70

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   53    | MINUS Exp .
   55    | Exp . POWER Exp

    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    $default  reduce using rule 53 (Exp)


State 71

   34 LValue: LValue . OPEN_BRACKET Exp CLOSE_BRACKET
   36       | LValue . DOT ID
   37       | OPEN_PAR LValue . CLOSE_PAR
   57 Exp: LValue .

    OPEN_BRACKET  shift, and go to state 61
    DOT           shift, and go to state 62
    CLOSE_PAR     shift, and go to state 65

    CLOSE_PAR  [reduce using rule 57 (Exp)]
    $default   reduce using rule 57 (Exp)


State 72

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   56    | OPEN_PAR Exp . CLOSE_PAR

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    CLOSE_PAR           shift, and go to state 108


State 73

   39 Exp: Exp EQUIV . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 109
    FuncCall  go to state 43


State 74

   40 Exp: Exp NOT_EQUIV . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 110
    FuncCall  go to state 43


State 75

   41 Exp: Exp OR . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 111
    FuncCall  go to state 43


State 76

   42 Exp: Exp AND . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 112
    FuncCall  go to state 43


State 77

   44 Exp: Exp LESS_THAN . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 113
    FuncCall  go to state 43


State 78

   45 Exp: Exp LESS_EQUAL_THAN . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 114
    FuncCall  go to state 43


State 79

   46 Exp: Exp GREATER_THAN . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 115
    FuncCall  go to state 43


State 80

   47 Exp: Exp GREATER_EQUAL_THAN . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 116
    FuncCall  go to state 43


State 81

   48 Exp: Exp PLUS . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 117
    FuncCall  go to state 43


State 82

   49 Exp: Exp MINUS . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 118
    FuncCall  go to state 43


State 83

   50 Exp: Exp ASTERISK . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 119
    FuncCall  go to state 43


State 84

   51 Exp: Exp DIV . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 120
    FuncCall  go to state 43


State 85

   52 Exp: Exp MODULE . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 121
    FuncCall  go to state 43


State 86

   55 Exp: Exp POWER . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 122
    FuncCall  go to state 43


State 87

   80 Conditional: IF Exp THEN . I OptElsif OptElse END

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    I            go to state 123
    Inst         go to state 13
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 88

   87 LoopWhile: WHILE Exp DO . I DONE

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    I            go to state 124
    Inst         go to state 13
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 89

   88 LoopFor: FOR OPEN_PAR ID . SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR DO I DONE

    SEMICOLON  shift, and go to state 125


State 90

   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET
   26     | POINTER Type .

    $default  reduce using rule 26 (Type)


State 91

   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET
   27     | OPEN_PAR Type . CLOSE_PAR

    OPEN_BRACKET  shift, and go to state 92
    CLOSE_PAR     shift, and go to state 126


State 92

   25 Type: Type OPEN_BRACKET . Exp CLOSE_BRACKET

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 127
    FuncCall  go to state 43


State 93

   18 VarDefBody: Type ID . OptAssign

    ASSIGNMENT  shift, and go to state 128

    $default  reduce using rule 19 (OptAssign)

    OptAssign  go to state 129


State 94

   91 RutineDef: DEF ID OPEN_PAR . RutineArgs CLOSE_PAR OptReturn OPEN_C_BRACE Actions CLOSE_C_BRACE

    POINTER   shift, and go to state 46
    OPEN_PAR  shift, and go to state 47
    T_INT     shift, and go to state 48
    T_CHAR    shift, and go to state 49
    T_BOOL    shift, and go to state 50
    T_FLOAT   shift, and go to state 51
    T_UNIT    shift, and go to state 52
    T_STRING  shift, and go to state 53

    $default  reduce using rule 92 (RutineArgs)

    Type        go to state 130
    RutineArgs  go to state 131
    ArgsDef     go to state 132


State 95

   69 FuncCall: ID OPEN_PAR ArgsExp . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 133


State 96

   71 ArgsExp: Args . RValue
   73 Args: Args . RValue COMMA

    NOT           shift, and go to state 32
    PLUS          shift, and go to state 33
    MINUS         shift, and go to state 34
    OPEN_BRACKET  shift, and go to state 99
    POINTER       shift, and go to state 1
    OPEN_PAR      shift, and go to state 35
    INT           shift, and go to state 36
    FLOAT         shift, and go to state 37
    ID            shift, and go to state 10
    CHAR          shift, and go to state 38
    STRING        shift, and go to state 100
    TRUE          shift, and go to state 39
    FALSE         shift, and go to state 40

    RValue    go to state 134
    LValue    go to state 41
    Exp       go to state 102
    Array     go to state 103
    FuncCall  go to state 43


State 97

   34 LValue: LValue OPEN_BRACKET Exp . CLOSE_BRACKET
   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    CLOSE_BRACKET       shift, and go to state 135


State 98

   36 LValue: LValue DOT ID .

    $default  reduce using rule 36 (LValue)


State 99

   64 Array: OPEN_BRACKET . ArrExp CLOSE_BRACKET

    CLOSE_BRACKET  reduce using rule 65 (ArrExp)
    $default       reduce using rule 67 (ArrElems)

    ArrExp    go to state 136
    ArrElems  go to state 137


State 100

   24 RValue: STRING .

    $default  reduce using rule 24 (RValue)


State 101

   21 Assign: LValue ASSIGNMENT RValue .

    $default  reduce using rule 21 (Assign)


State 102

   22 RValue: Exp .
   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86

    $default  reduce using rule 22 (RValue)


State 103

   23 RValue: Array .

    $default  reduce using rule 23 (RValue)


State 104

   78 RegisterBody: VarDef . SEMICOLON

    SEMICOLON  shift, and go to state 138


State 105

   77 RegisterDef: REGISTER ID OPEN_C_BRACE RegisterBody . CLOSE_C_BRACE
   79 RegisterBody: RegisterBody . VarDef SEMICOLON

    CLOSE_C_BRACE  shift, and go to state 139
    LET            shift, and go to state 8

    VarDef  go to state 140


State 106

   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET
   75 UnionBody: Type . ID SEMICOLON

    OPEN_BRACKET  shift, and go to state 92
    ID            shift, and go to state 141


State 107

   74 UnionDef: UNION ID OPEN_C_BRACE UnionBody . CLOSE_C_BRACE
   76 UnionBody: UnionBody . Type ID SEMICOLON

    POINTER        shift, and go to state 46
    OPEN_PAR       shift, and go to state 47
    T_INT          shift, and go to state 48
    T_CHAR         shift, and go to state 49
    T_BOOL         shift, and go to state 50
    T_FLOAT        shift, and go to state 51
    T_UNIT         shift, and go to state 52
    T_STRING       shift, and go to state 53
    CLOSE_C_BRACE  shift, and go to state 142

    Type  go to state 143


State 108

   56 Exp: OPEN_PAR Exp CLOSE_PAR .

    $default  reduce using rule 56 (Exp)


State 109

   39 Exp: Exp . EQUIV Exp
   39    | Exp EQUIV Exp .
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86

    $default  reduce using rule 39 (Exp)


State 110

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   40    | Exp NOT_EQUIV Exp .
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86

    $default  reduce using rule 40 (Exp)


State 111

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   41    | Exp OR Exp .
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86

    $default  reduce using rule 41 (Exp)


State 112

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   42    | Exp AND Exp .
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86

    $default  reduce using rule 42 (Exp)


State 113

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   44    | Exp LESS_THAN Exp .
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    PLUS      shift, and go to state 81
    MINUS     shift, and go to state 82
    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    LESS_THAN           error (nonassociative)
    LESS_EQUAL_THAN     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_EQUAL_THAN  error (nonassociative)

    $default  reduce using rule 44 (Exp)


State 114

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   45    | Exp LESS_EQUAL_THAN Exp .
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    PLUS      shift, and go to state 81
    MINUS     shift, and go to state 82
    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    LESS_THAN           error (nonassociative)
    LESS_EQUAL_THAN     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_EQUAL_THAN  error (nonassociative)

    $default  reduce using rule 45 (Exp)


State 115

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   46    | Exp GREATER_THAN Exp .
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    PLUS      shift, and go to state 81
    MINUS     shift, and go to state 82
    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    LESS_THAN           error (nonassociative)
    LESS_EQUAL_THAN     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_EQUAL_THAN  error (nonassociative)

    $default  reduce using rule 46 (Exp)


State 116

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   47    | Exp GREATER_EQUAL_THAN Exp .
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    PLUS      shift, and go to state 81
    MINUS     shift, and go to state 82
    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    LESS_THAN           error (nonassociative)
    LESS_EQUAL_THAN     error (nonassociative)
    GREATER_THAN        error (nonassociative)
    GREATER_EQUAL_THAN  error (nonassociative)

    $default  reduce using rule 47 (Exp)


State 117

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   48    | Exp PLUS Exp .
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    $default  reduce using rule 48 (Exp)


State 118

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   49    | Exp MINUS Exp .
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    ASTERISK  shift, and go to state 83
    DIV       shift, and go to state 84
    MODULE    shift, and go to state 85
    POWER     shift, and go to state 86

    $default  reduce using rule 49 (Exp)


State 119

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   50    | Exp ASTERISK Exp .
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    POWER  shift, and go to state 86

    $default  reduce using rule 50 (Exp)


State 120

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   51    | Exp DIV Exp .
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    POWER  shift, and go to state 86

    $default  reduce using rule 51 (Exp)


State 121

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   52    | Exp MODULE Exp .
   55    | Exp . POWER Exp

    POWER  shift, and go to state 86

    $default  reduce using rule 52 (Exp)


State 122

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   55    | Exp POWER Exp .

    POWER  shift, and go to state 86

    $default  reduce using rule 55 (Exp)


State 123

    4 I: I . Inst
   80 Conditional: IF Exp THEN I . OptElsif OptElse END

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    ELSIF     shift, and go to state 144
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    $default  reduce using rule 81 (OptElsif)

    Inst         go to state 59
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    OptElsif     go to state 145
    Elsifs       go to state 146
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 124

    4 I: I . Inst
   87 LoopWhile: WHILE Exp DO I . DONE

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    DONE      shift, and go to state 147
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    Inst         go to state 59
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 125

   88 LoopFor: FOR OPEN_PAR ID SEMICOLON . Exp SEMICOLON Exp OptStep CLOSE_PAR DO I DONE

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 148
    FuncCall  go to state 43


State 126

   27 Type: OPEN_PAR Type CLOSE_PAR .

    $default  reduce using rule 27 (Type)


State 127

   25 Type: Type OPEN_BRACKET Exp . CLOSE_BRACKET
   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    CLOSE_BRACKET       shift, and go to state 149


State 128

   20 OptAssign: ASSIGNMENT . RValue

    NOT           shift, and go to state 32
    PLUS          shift, and go to state 33
    MINUS         shift, and go to state 34
    OPEN_BRACKET  shift, and go to state 99
    POINTER       shift, and go to state 1
    OPEN_PAR      shift, and go to state 35
    INT           shift, and go to state 36
    FLOAT         shift, and go to state 37
    ID            shift, and go to state 10
    CHAR          shift, and go to state 38
    STRING        shift, and go to state 100
    TRUE          shift, and go to state 39
    FALSE         shift, and go to state 40

    RValue    go to state 150
    LValue    go to state 41
    Exp       go to state 102
    Array     go to state 103
    FuncCall  go to state 43


State 129

   18 VarDefBody: Type ID OptAssign .

    $default  reduce using rule 18 (VarDefBody)


State 130

   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET
   94 ArgsDef: Type . OptRef ID OptAssign

    OPEN_BRACKET  shift, and go to state 92
    AT            shift, and go to state 151

    $default  reduce using rule 96 (OptRef)

    OptRef  go to state 152


State 131

   91 RutineDef: DEF ID OPEN_PAR RutineArgs . CLOSE_PAR OptReturn OPEN_C_BRACE Actions CLOSE_C_BRACE

    CLOSE_PAR  shift, and go to state 153


State 132

   93 RutineArgs: ArgsDef .
   95 ArgsDef: ArgsDef . Type OptRef ID OptAssign

    POINTER   shift, and go to state 46
    OPEN_PAR  shift, and go to state 47
    T_INT     shift, and go to state 48
    T_CHAR    shift, and go to state 49
    T_BOOL    shift, and go to state 50
    T_FLOAT   shift, and go to state 51
    T_UNIT    shift, and go to state 52
    T_STRING  shift, and go to state 53

    $default  reduce using rule 93 (RutineArgs)

    Type  go to state 154


State 133

   69 FuncCall: ID OPEN_PAR ArgsExp CLOSE_PAR .

    $default  reduce using rule 69 (FuncCall)


State 134

   71 ArgsExp: Args RValue .
   73 Args: Args RValue . COMMA

    COMMA  shift, and go to state 155

    $default  reduce using rule 71 (ArgsExp)


State 135

   34 LValue: LValue OPEN_BRACKET Exp CLOSE_BRACKET .

    $default  reduce using rule 34 (LValue)


State 136

   64 Array: OPEN_BRACKET ArrExp . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 156


State 137

   66 ArrExp: ArrElems . RValue
   68 ArrElems: ArrElems . RValue COMMA

    NOT           shift, and go to state 32
    PLUS          shift, and go to state 33
    MINUS         shift, and go to state 34
    OPEN_BRACKET  shift, and go to state 99
    POINTER       shift, and go to state 1
    OPEN_PAR      shift, and go to state 35
    INT           shift, and go to state 36
    FLOAT         shift, and go to state 37
    ID            shift, and go to state 10
    CHAR          shift, and go to state 38
    STRING        shift, and go to state 100
    TRUE          shift, and go to state 39
    FALSE         shift, and go to state 40

    RValue    go to state 157
    LValue    go to state 41
    Exp       go to state 102
    Array     go to state 103
    FuncCall  go to state 43


State 138

   78 RegisterBody: VarDef SEMICOLON .

    $default  reduce using rule 78 (RegisterBody)


State 139

   77 RegisterDef: REGISTER ID OPEN_C_BRACE RegisterBody CLOSE_C_BRACE .

    $default  reduce using rule 77 (RegisterDef)


State 140

   79 RegisterBody: RegisterBody VarDef . SEMICOLON

    SEMICOLON  shift, and go to state 158


State 141

   75 UnionBody: Type ID . SEMICOLON

    SEMICOLON  shift, and go to state 159


State 142

   74 UnionDef: UNION ID OPEN_C_BRACE UnionBody CLOSE_C_BRACE .

    $default  reduce using rule 74 (UnionDef)


State 143

   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET
   76 UnionBody: UnionBody Type . ID SEMICOLON

    OPEN_BRACKET  shift, and go to state 92
    ID            shift, and go to state 160


State 144

   83 Elsifs: ELSIF . Exp THEN I

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 161
    FuncCall  go to state 43


State 145

   80 Conditional: IF Exp THEN I OptElsif . OptElse END

    ELSE  shift, and go to state 162

    $default  reduce using rule 85 (OptElse)

    OptElse  go to state 163


State 146

   82 OptElsif: Elsifs .
   84 Elsifs: Elsifs . ELSIF Exp THEN I

    ELSIF  shift, and go to state 164

    $default  reduce using rule 82 (OptElsif)


State 147

   87 LoopWhile: WHILE Exp DO I DONE .

    $default  reduce using rule 87 (LoopWhile)


State 148

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp . SEMICOLON Exp OptStep CLOSE_PAR DO I DONE

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    SEMICOLON           shift, and go to state 165


State 149

   25 Type: Type OPEN_BRACKET Exp CLOSE_BRACKET .

    $default  reduce using rule 25 (Type)


State 150

   20 OptAssign: ASSIGNMENT RValue .

    $default  reduce using rule 20 (OptAssign)


State 151

   97 OptRef: AT .

    $default  reduce using rule 97 (OptRef)


State 152

   94 ArgsDef: Type OptRef . ID OptAssign

    ID  shift, and go to state 166


State 153

   91 RutineDef: DEF ID OPEN_PAR RutineArgs CLOSE_PAR . OptReturn OPEN_C_BRACE Actions CLOSE_C_BRACE

    RIGHT_ARROW  shift, and go to state 167

    $default  reduce using rule 98 (OptReturn)

    OptReturn  go to state 168


State 154

   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET
   95 ArgsDef: ArgsDef Type . OptRef ID OptAssign

    OPEN_BRACKET  shift, and go to state 92
    AT            shift, and go to state 151

    $default  reduce using rule 96 (OptRef)

    OptRef  go to state 169


State 155

   73 Args: Args RValue COMMA .

    $default  reduce using rule 73 (Args)


State 156

   64 Array: OPEN_BRACKET ArrExp CLOSE_BRACKET .

    $default  reduce using rule 64 (Array)


State 157

   66 ArrExp: ArrElems RValue .
   68 ArrElems: ArrElems RValue . COMMA

    COMMA  shift, and go to state 170

    $default  reduce using rule 66 (ArrExp)


State 158

   79 RegisterBody: RegisterBody VarDef SEMICOLON .

    $default  reduce using rule 79 (RegisterBody)


State 159

   75 UnionBody: Type ID SEMICOLON .

    $default  reduce using rule 75 (UnionBody)


State 160

   76 UnionBody: UnionBody Type ID . SEMICOLON

    SEMICOLON  shift, and go to state 171


State 161

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   83 Elsifs: ELSIF Exp . THEN I

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    THEN                shift, and go to state 172


State 162

   86 OptElse: ELSE . I

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    I            go to state 173
    Inst         go to state 13
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 163

   80 Conditional: IF Exp THEN I OptElsif OptElse . END

    END  shift, and go to state 174


State 164

   84 Elsifs: Elsifs ELSIF . Exp THEN I

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 175
    FuncCall  go to state 43


State 165

   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON . Exp OptStep CLOSE_PAR DO I DONE

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 176
    FuncCall  go to state 43


State 166

   94 ArgsDef: Type OptRef ID . OptAssign

    ASSIGNMENT  shift, and go to state 128

    $default  reduce using rule 19 (OptAssign)

    OptAssign  go to state 177


State 167

   99 OptReturn: RIGHT_ARROW . Type

    POINTER   shift, and go to state 46
    OPEN_PAR  shift, and go to state 47
    T_INT     shift, and go to state 48
    T_CHAR    shift, and go to state 49
    T_BOOL    shift, and go to state 50
    T_FLOAT   shift, and go to state 51
    T_UNIT    shift, and go to state 52
    T_STRING  shift, and go to state 53

    Type  go to state 178


State 168

   91 RutineDef: DEF ID OPEN_PAR RutineArgs CLOSE_PAR OptReturn . OPEN_C_BRACE Actions CLOSE_C_BRACE

    OPEN_C_BRACE  shift, and go to state 179


State 169

   95 ArgsDef: ArgsDef Type OptRef . ID OptAssign

    ID  shift, and go to state 180


State 170

   68 ArrElems: ArrElems RValue COMMA .

    $default  reduce using rule 68 (ArrElems)


State 171

   76 UnionBody: UnionBody Type ID SEMICOLON .

    $default  reduce using rule 76 (UnionBody)


State 172

   83 Elsifs: ELSIF Exp THEN . I

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    I            go to state 181
    Inst         go to state 13
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 173

    4 I: I . Inst
   86 OptElse: ELSE I .

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    $default  reduce using rule 86 (OptElse)

    Inst         go to state 59
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 174

   80 Conditional: IF Exp THEN I OptElsif OptElse END .

    $default  reduce using rule 80 (Conditional)


State 175

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   84 Elsifs: Elsifs ELSIF Exp . THEN I

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    THEN                shift, and go to state 182


State 176

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp . OptStep CLOSE_PAR DO I DONE

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86
    SEMICOLON           shift, and go to state 183

    $default  reduce using rule 89 (OptStep)

    OptStep  go to state 184


State 177

   94 ArgsDef: Type OptRef ID OptAssign .

    $default  reduce using rule 94 (ArgsDef)


State 178

   25 Type: Type . OPEN_BRACKET Exp CLOSE_BRACKET
   99 OptReturn: RIGHT_ARROW Type .

    OPEN_BRACKET  shift, and go to state 92

    $default  reduce using rule 99 (OptReturn)


State 179

   91 RutineDef: DEF ID OPEN_PAR RutineArgs CLOSE_PAR OptReturn OPEN_C_BRACE . Actions CLOSE_C_BRACE

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    ID        shift, and go to state 10

    Action       go to state 185
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    Actions      go to state 186


State 180

   95 ArgsDef: ArgsDef Type OptRef ID . OptAssign

    ASSIGNMENT  shift, and go to state 128

    $default  reduce using rule 19 (OptAssign)

    OptAssign  go to state 187


State 181

    4 I: I . Inst
   83 Elsifs: ELSIF Exp THEN I .

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    $default  reduce using rule 83 (Elsifs)

    Inst         go to state 59
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 182

   84 Elsifs: Elsifs ELSIF Exp THEN . I

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    I            go to state 188
    Inst         go to state 13
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 183

   90 OptStep: SEMICOLON . Exp

    NOT       shift, and go to state 32
    PLUS      shift, and go to state 33
    MINUS     shift, and go to state 34
    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 35
    INT       shift, and go to state 36
    FLOAT     shift, and go to state 37
    ID        shift, and go to state 10
    CHAR      shift, and go to state 38
    TRUE      shift, and go to state 39
    FALSE     shift, and go to state 40

    LValue    go to state 41
    Exp       go to state 189
    FuncCall  go to state 43


State 184

   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp OptStep . CLOSE_PAR DO I DONE

    CLOSE_PAR  shift, and go to state 190


State 185

  100 Actions: Action .

    $default  reduce using rule 100 (Actions)


State 186

   91 RutineDef: DEF ID OPEN_PAR RutineArgs CLOSE_PAR OptReturn OPEN_C_BRACE Actions . CLOSE_C_BRACE
  101 Actions: Actions . Action

    POINTER        shift, and go to state 1
    OPEN_PAR       shift, and go to state 2
    CLOSE_C_BRACE  shift, and go to state 191
    IF             shift, and go to state 5
    WHILE          shift, and go to state 6
    FOR            shift, and go to state 7
    LET            shift, and go to state 8
    ID             shift, and go to state 10

    Action       go to state 192
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25


State 187

   95 ArgsDef: ArgsDef Type OptRef ID OptAssign .

    $default  reduce using rule 95 (ArgsDef)


State 188

    4 I: I . Inst
   84 Elsifs: Elsifs ELSIF Exp THEN I .

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    $default  reduce using rule 84 (Elsifs)

    Inst         go to state 59
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 189

   39 Exp: Exp . EQUIV Exp
   40    | Exp . NOT_EQUIV Exp
   41    | Exp . OR Exp
   42    | Exp . AND Exp
   44    | Exp . LESS_THAN Exp
   45    | Exp . LESS_EQUAL_THAN Exp
   46    | Exp . GREATER_THAN Exp
   47    | Exp . GREATER_EQUAL_THAN Exp
   48    | Exp . PLUS Exp
   49    | Exp . MINUS Exp
   50    | Exp . ASTERISK Exp
   51    | Exp . DIV Exp
   52    | Exp . MODULE Exp
   55    | Exp . POWER Exp
   90 OptStep: SEMICOLON Exp .

    EQUIV               shift, and go to state 73
    NOT_EQUIV           shift, and go to state 74
    OR                  shift, and go to state 75
    AND                 shift, and go to state 76
    LESS_THAN           shift, and go to state 77
    LESS_EQUAL_THAN     shift, and go to state 78
    GREATER_THAN        shift, and go to state 79
    GREATER_EQUAL_THAN  shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    ASTERISK            shift, and go to state 83
    DIV                 shift, and go to state 84
    MODULE              shift, and go to state 85
    POWER               shift, and go to state 86

    $default  reduce using rule 90 (OptStep)


State 190

   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR . DO I DONE

    DO  shift, and go to state 193


State 191

   91 RutineDef: DEF ID OPEN_PAR RutineArgs CLOSE_PAR OptReturn OPEN_C_BRACE Actions CLOSE_C_BRACE .

    $default  reduce using rule 91 (RutineDef)


State 192

  101 Actions: Actions Action .

    $default  reduce using rule 101 (Actions)


State 193

   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR DO . I DONE

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    I            go to state 194
    Inst         go to state 13
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 194

    4 I: I . Inst
   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR DO I . DONE

    POINTER   shift, and go to state 1
    OPEN_PAR  shift, and go to state 2
    REGISTER  shift, and go to state 3
    UNION     shift, and go to state 4
    IF        shift, and go to state 5
    WHILE     shift, and go to state 6
    DONE      shift, and go to state 195
    FOR       shift, and go to state 7
    LET       shift, and go to state 8
    DEF       shift, and go to state 9
    ID        shift, and go to state 10

    Inst         go to state 59
    Action       go to state 14
    Def          go to state 15
    VarInst      go to state 16
    VarDef       go to state 17
    Assign       go to state 18
    LValue       go to state 19
    FuncCall     go to state 20
    UnionDef     go to state 21
    RegisterDef  go to state 22
    Conditional  go to state 23
    LoopWhile    go to state 24
    LoopFor      go to state 25
    RutineDef    go to state 26


State 195

   88 LoopFor: FOR OPEN_PAR ID SEMICOLON Exp SEMICOLON Exp OptStep CLOSE_PAR DO I DONE .

    $default  reduce using rule 88 (LoopFor)
