# Implementacion de funciones matematicas.

def factRec(Int n) => Int {
	if n < 0 then 
		print("No esta definido el factorial para numeros negativos");
		exit(1);
	elsif n == 0 then 
		return 1;
	else 
		return n * factRec(n - 1);
	done
}

def factIter(Int n) => Int {
	if n < 0 then 
		print("No esta definido el factorial para numeros negativos");
		exit(1);
	done 
	let Int r = 1;
	while n > 0 do 
		r = r * n;
		n = n - 1;
	done 
	return r;
}

def abs(Float x) => Float {
	if x < 0 then return -x;
	else return x;
	done 
}

def sqrt(Float P, Float prec=0.000001) => Float {
	let Float x = P, dif = 1.0, aux;

	while dif > prec do 
		aux = x;
		x = (x + P / x) / 2;
		dif = abs(x - aux);
	done 

	return x;
}

def prom(Float[] M, Int N) => Float {
	let Float r = 0.0;

	let Int i = 0;
	while i < N do r = r + M[i]; done 

	return r / N;
}

def min(Float[] M, Int N) => Float {
	if N < 1 then 
		print("No se puede calcular el minimo de un arreglo vacio.");
		exit(1);
	done 

	let Float min = M[0];
	let Int i = 1;

	while i < N do 
		if M[i] < min then min = M[i]; done 
	done 

	return min;
}

def max(Float[] M, Int N) => Float {
	if N < 1 then 
		print("No se puede calcular el maximo de un arreglo vacio.");
		exit(1);
	done 

	let Float max = M[0];
	let Int i = 1;

	while i < N do 
		if M[i] > max then max = M[i]; done 
	done 

	return max;
}

def variance(Float[] M, Int N) => Float {
	if N == 0 then return 0.0; done

	let Float u = prom(M, N), r = 0.0;
	let Int i = 0;

	while i < N do 
		r = r + (M[i] - u) * (M[i] - u);
	done 

	return r / N;
}

def std_dev(Float[] M, Int N) => Float {
	return sqrt(variance(M, N));
}