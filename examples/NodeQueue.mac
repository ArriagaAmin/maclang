execonce "Node.mac";

register NodeQueue {
	^((^Node)[]) array;
	Int capacity;
	Int size;
	Int head;
	Int tail;
}

def NodeQueue_init(Int capacity = 8) => ^NodeQueue {
	let ^NodeQueue q = new NodeQueue;
	^q.array = new (^Node)[capacity];
	^q.capacity = capacity;
	^q.size = 0;
	^q.head = 0;
	^q.tail = 0;

	return q;
}

def NodeQueue_destroy(^NodeQueue q) {
	forget ^q.array;
	forget q;
}

def NodeQueue_resize(^NodeQueue q) {
	let ^((^Node)[]) new_array = new (^Node)[2 * ^q.capacity];

	let Int tail = ^q.tail;
	let Int i = 0;
	while tail != ^q.head do
		^new_array[i] = ^(^q.array)[tail];
		tail = (tail + 1) % ^q.capacity;
	done 

	forget ^q.array;
	^q.array = new_array;
}

def NodeQueue_push(^NodeQueue q, ^Node n) {
	if ^q.size == ^q.capacity then NodeQueue_resize(q); done 

	^(^q.array)[^q.head] = n;
	^q.head = (^q.head + 1) % ^q.capacity;
	^q.size = ^q.size + 1;
}

def NodeQueue_pop(^NodeQueue q) => ^Node {
	if ^q.size == 0 then return NodeNUL; done 

	let ^Node n = ^(^q.array)[^q.tail];
	^q.tail = (^q.tail + 1) % ^q.capacity;
	^q.size = ^q.size + 1;
	return n;
}

def NodeQueue_empty(^NodeQueue q) => Bool {
	return ^q.size == 0;
}