let String nl = ['\n'];

# Quicksort sobre enteros 
dec quicksortInt(Int[] A, Int m, Int n);

# Quicksort sobre caracteres
dec quicksortChar(String A, Int m, Int n);

let Int option, N, i;
let Int[100] integers;
let Char[100] chars;


while True do 
	print("Menu principal. Escoja una de las siguientes opciones: ");
	print("1. Ordenar numeros enteros. ");
	print("2. Ordenar caracteres. ");
	print("3. Salir. ");
	option = readi();
	
	if 0 < option && option < 4 then 
		print("Indique el numero de elementos a ordenar. Recuerde que debe estar entre 1 y 100: ");
		N = readi();

		if N < 1 || N > 100 then 
			print("Numero de elementos invalido.");
			continue;
		done

		print("Indique los elementos: ");
		if option == 1 then 
			for (i; 0; N) do 
				integers[i] = readi();
			done 

			quicksortInt(integers, 0, N);
			print("%cEl arreglo ordenado de enteros es:%c[", chars=['\n', '[']);

			for (i; 0; N-1) do 
				print("%i, ", ints=[integers[i]]);
			done 
			print("%i]%c", ints=[integers[N-1]], chars=['\n']);

		elsif option == 2 then  
			for (i; 0; N) do 
				chars[i] = readc();
			done 

			quicksortChar(chars, 0, N);
			print("%cEl arreglo ordenado de caracteres es:%c[", chars=['\n', '[']);

			for (i; 0; N-1) do 
				print("%c, ", chars=[chars[i]]);
			done 
			print("%c]%c", chars=[chars[N-1], '\n']);
		done
	
	elsif option == 3 then 
		print("Hasta luego!");
		break;

	else 
		print("Opcion invalida.", end=['\n', '\n']);
	done
done


def swapInt(Int @a, Int @b) {
	let Int t = a;
	a = b;
	b = t;
}
def quicksortInt(Int[] A, Int m, Int n) {
	let Int i, j, v, x;
	if n <= m then return; done

	i = m; 
	j = n-1; 
	v = A[n];
	while True do 
		while A[i] < v do 
			i = i + 1;
		done 

		while A[j] > v do 
			j = j - 1;
		done 

		if i >= j then break; done 

		swapInt(A[i], A[j]);
	done
	swapInt(A[i], A[n]);

	quicksortInt(A, m, j); quicksortInt(A, i+1, n);
}

def swapChar(Char @a, Char @b) {
	let Char t = a;
	a = b;
	b = t;
}
def quicksortChar(Char[] A, Int m, Int n) {
	let Int i, j;
	let Char v, x;
	if n <= m then return; done

	i = m; 
	j = n-1; 
	v = A[n];
	while True do 
		while A[i] < v do 
			i = i + 1;
		done 

		while A[j] > v do 
			j = j - 1;
		done 

		if i >= j then break; done 

		swapChar(A[i], A[j]);
	done
	swapChar(A[i], A[n]);

	quicksortChar(A, m, j); quicksortChar(A, i+1, n);
}
