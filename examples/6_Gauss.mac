execonce "examples/String.mac";

dec gauss(Float[][] M, Int N) => Bool;

let Int LINE_SIZE = 1024;

let Float[10][11] M;
let Int N, i, j;
let Char[LINE_SIZE] buffer;

while True do 
	print("Desea resolver un sistema de ecuaciones? [Y/n] ");
	read(buffer);
	if strcmp(buffer, "n") == 0 || strcmp(buffer, "N") == 0 then 
		print("Hasta luego!");
	done 

	print("Indique el numero de ecuaciones. Debe ser entre 1 y 10: ");
	read(buffer);
	N = stoi(buffer);

	i = 0;
	while i < N do 
		print("Indique los ");
		itos(buffer, N+1);
		print(buffer);
		print(" coeficientes flotantes de la ");
		itos(buffer, i);
		print(buffer);
		print("-esima ecuacion: ");
		print(nl);

		j = 0;
		while j < N + 1 do 
			read(buffer);
			M[i][j] = stof(buffer);
			j = j + 1;
		done 
		i = i + 1;
	done

	if gauss(M, N) then 
		print("El valor de las variables es: ");
		print(nl);

		i = 0;
		while i < N do 
			print("X");
			itos(buffer, i);
			print(buffer);
			print(" = ");
			ftos(buffer, M[i][N]);
			print(buffer);
			print(nl);
		done 
		print(nl);

	else 
		print("El sistema de ecuaciones no tiene solucion.");
		print(nl);
	done
done 



def abs(Float x) => Float {
	if x < 0 then return -x;
	else return x;
	done 
}

def argmax_col(Float[][] M, Int N, Int col) => Int {
	let Float max = abs(M[0][col]);
	let Int i = 1, i_max = 0;

	while i < N do 
		if abs(M[i][col]) > max then 
			max = abs(M[i][col]); 
			i_max = i;
		done 
	done 

	return i_max;

}

def swap_rows(Float[][] M, Int N, Int h, Int k) {
	let Float aux;
	let Int i = 0;

	while i < N do 
		aux = M[h][i];
		M[h][i] = M[k][i];
		M[k][i] = aux;
	done
}

def gauss(Float[][] M, Int N) => Bool {
	let Int h = 0, i_max, i, j;
	let Float f;

	while h < N do 
		i_max = argmax_col(M, N, h);

		if M[i_max][h] == 0 then 
			return False;
		done 

		swap_rows(M, N + 1, h, i_max);

		i = h + 1;
		while i < N do 
			f = M[i][h] / M[h][h];

			j = h + 1;
			while j < N + 1 do 
				M[i][j] = M[i][j] - M[h][j] * f ;
				j = j + 1;
			done 

			i = i + 1;
		done 

		h = h + 1;
	done 

	h = N - 1;
	while h >= 0 do 
		i = 0;
		while i < h do 
			M[i][N] = M[i][N] - M[h][N] * M[i][h] / M[h][h];
			i = i + 1;
		done 
		M[h][N] = M[h][N] / M[h][h];
		h = h - 1;
	done
}